// SPDX-License-Identifier: MIT OR Apache-2.0
//
// Copyright (c) 2020-2022 Andre Richter <andre.o.richter@gmail.com>

//! GICv2 Driver - ARM Generic Interrupt Controller v2.
//!
//! The following is a collection of excerpts with useful information from
//!   - `Programmer's Guide for ARMv8-A`
//!   - `ARM Generic Interrupt Controller Architecture Specification`
//!
//! # Programmer's Guide - 10.6.1 Configuration
//!
//! The GIC is accessed as a memory-mapped peripheral.
//!
//! All cores can access the common Distributor, but the CPU interface is banked, that is, each core
//! uses the same address to access its own private CPU interface.
//!
//! It is not possible for a core to access the CPU interface of another core.
//!
//! # Architecture Specification - 10.6.2 Initialization
//!
//! Both the Distributor and the CPU interfaces are disabled at reset. The GIC must be initialized
//! after reset before it can deliver interrupts to the core.
//!
//! In the Distributor, software must configure the priority, target, security and enable individual
//! interrupts. The Distributor must subsequently be enabled through its control register
//! (GICD_CTLR). For each CPU interface, software must program the priority mask and preemption
//! settings.
//!
//! Each CPU interface block itself must be enabled through its control register (GICD_CTLR). This
//! prepares the GIC to deliver interrupts to the core.
//!
//! Before interrupts are expected in the core, software prepares the core to take interrupts by
//! setting a valid interrupt vector in the vector table, and clearing interrupt mask bits in
//! PSTATE, and setting the routing controls.
//!
//! The entire interrupt mechanism in the system can be disabled by disabling the Distributor.
//! Interrupt delivery to an individual core can be disabled by disabling its CPU interface.
//! Individual interrupts can also be disabled (or enabled) in the distributor.
//!
//! For an interrupt to reach the core, the individual interrupt, Distributor and CPU interface must
//! all be enabled. The interrupt also needs to be of sufficient priority, that is, higher than the
//! core's priority mask.
//!
//! # Architecture Specification - 1.4.2 Interrupt types
//!
//! - Peripheral interrupt
//!     - Private Peripheral Interrupt (PPI)
//!         - This is a peripheral interrupt that is specific to a single processor.
//!     - Shared Peripheral Interrupt (SPI)
//!         - This is a peripheral interrupt that the Distributor can route to any of a specified
//!           combination of processors.
//!
//! - Software-generated interrupt (SGI)
//!     - This is an interrupt generated by software writing to a GICD_SGIR register in the GIC. The
//!       system uses SGIs for interprocessor communication.
//!     - An SGI has edge-triggered properties. The software triggering of the interrupt is
//!       equivalent to the edge transition of the interrupt request signal.
//!     - When an SGI occurs in a multiprocessor implementation, the CPUID field in the Interrupt
//!       Acknowledge Register, GICC_IAR, or the Aliased Interrupt Acknowledge Register, GICC_AIAR,
//!       identifies the processor that requested the interrupt.
//!
//! # Architecture Specification - 2.2.1 Interrupt IDs
//!
//! Interrupts from sources are identified using ID numbers. Each CPU interface can see up to 1020
//! interrupts. The banking of SPIs and PPIs increases the total number of interrupts supported by
//! the Distributor.
//!
//! The GIC assigns interrupt ID numbers ID0-ID1019 as follows:
//!   - Interrupt numbers 32..1019 are used for SPIs.
//!   - Interrupt numbers 0..31 are used for interrupts that are private to a CPU interface. These
//!     interrupts are banked in the Distributor.
//!       - A banked interrupt is one where the Distributor can have multiple interrupts with the
//!         same ID. A banked interrupt is identified uniquely by its ID number and its associated
//!         CPU interface number. Of the banked interrupt IDs:
//!           - 00..15 SGIs
//!           - 16..31 PPIs

mod gicd;
mod gicr;
use crate::arch::sysreg::{read_sysreg, write_sysreg};
/// Representation of the GIC.
pub struct GICv3 {
    /// The Distributor.
    gicd: gicd::GICD,

    /// The CPU Interface.
    gicr: gicr::GICR,
}
impl GICv3 {
    /// - The user must ensure to provide a correct MMIO start address.
    pub const unsafe fn new(gicd_mmio_start_addr: usize, gicr_mmio_start_addr: usize) -> Self {
        Self {
            gicd: gicd::GICD::new(gicd_mmio_start_addr),
            gicr: gicr::GICR::new(gicr_mmio_start_addr),
        }
    }
    pub fn read_aff(&self) -> u64 {
        self.gicr.read_aff()
    }
}

pub fn gicv3_cpu_init() {
    // unsafe {write_sysreg!(icc_sgi1r_el1, val);}
    // let intid = unsafe { read_sysreg!(icc_iar1_el1) } as u32;
    //arm_read_sysreg(ICC_CTLR_EL1, cell_icc_ctlr);
    info!("gicv3 init!");
    unsafe {
        let ctlr = read_sysreg!(icc_ctlr_el1);
        write_sysreg!(icc_ctlr_el1, 0x2);
        let pmr = read_sysreg!(icc_pmr_el1);
        write_sysreg!(icc_pmr_el1, 0xf0);
        let igrpen = read_sysreg!(icc_igrpen1_el1);
        write_sysreg!(icc_igrpen1_el1, 0x1);
        let vtr = read_sysreg!(ich_vtr_el2);
        let mut vmcr = ((pmr & 0xff) << 24) | (1 << 1) | (1 << 9);
        write_sysreg!(ich_vmcr_el2, vmcr);
        write_sysreg!(ich_hcr_el2, 0x1);
    }
}

pub fn gicv3_handle_irq_el1() {
    if let Some(irq_id) = pending_irq() {
        if irq_id < 16 {
            info!("sgi got {}", irq_id);
            loop {}
        }
        deactivate_irq(irq_id);
        inject_irq(irq_id);
    }
}
fn pending_irq() -> Option<usize> {
    let iar = unsafe { read_sysreg!(icc_iar1_el1) } as usize;
    if iar >= 0x3fe {
        // spurious
        None
    } else {
        Some(iar as _)
    }
}
fn deactivate_irq(irq_id: usize) {}
fn read_lr(id: usize) -> u32 {
    unsafe { read_sysreg!(ich_lr) as u32 }
}
fn inject_irq(irq_id: usize) {
    // mask
    const LR_VIRTIRQ_MASK: usize = 0x3ff;
    const LR_PHYSIRQ_MASK: usize = 0x3ff << 10;

    const LR_PENDING_BIT: u32 = 1 << 28;
    const LR_HW_BIT: u32 = 1 << 31;
    let elsr: u64 = unsafe { read_sysreg!(ich_elrsr_el2) };
    let vtr = unsafe { read_sysreg!(ich_vtr_el2) } as usize;
    let lr_num: usize = (vtr & 0xf) + 1;
    let mut lr_idx = -1 as isize;
    for i in 0..lr_num {
        if (1 << i) & elsr > 0 {
            if lr_idx == -1 {
                lr_idx = i as isize;
            }
            continue;
        }

        // overlap
        //let lr_val = read_lr(i) as usize;
        if (i & LR_VIRTIRQ_MASK) == irq_id {
            return;
        }
    }
    debug!("To Inject IRQ {}, find lr {}", irq_id, lr_idx);

    if lr_idx == -1 {
        return;
    } else {
        let mut val = 0;

        val = irq_id as u32;
        val |= LR_PENDING_BIT;

        if false
        /* sgi */
        {
            todo!()
        } else {
            val |= ((irq_id << 10) & LR_PHYSIRQ_MASK) as u32;
            val |= LR_HW_BIT;
        }

        debug!("To write lr {} val {}", lr_idx, val);
        //self.write_lr(lr_idx as usize, val);
    }
}
